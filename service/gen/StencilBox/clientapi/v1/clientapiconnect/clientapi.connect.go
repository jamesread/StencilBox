// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: StencilBox/clientapi/v1/clientapi.proto

package clientapiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/jamesread/StencilBox/gen/StencilBox/clientapi/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StencilBoxApiServiceName is the fully-qualified name of the StencilBoxApiService service.
	StencilBoxApiServiceName = "StencilBox.clientapi.v1.StencilBoxApiService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StencilBoxApiServiceInitProcedure is the fully-qualified name of the StencilBoxApiService's Init
	// RPC.
	StencilBoxApiServiceInitProcedure = "/StencilBox.clientapi.v1.StencilBoxApiService/Init"
)

// StencilBoxApiServiceClient is a client for the StencilBox.clientapi.v1.StencilBoxApiService
// service.
type StencilBoxApiServiceClient interface {
	Init(context.Context, *connect.Request[v1.InitRequest]) (*connect.Response[v1.InitResponse], error)
}

// NewStencilBoxApiServiceClient constructs a client for the
// StencilBox.clientapi.v1.StencilBoxApiService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStencilBoxApiServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StencilBoxApiServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	stencilBoxApiServiceMethods := v1.File_StencilBox_clientapi_v1_clientapi_proto.Services().ByName("StencilBoxApiService").Methods()
	return &stencilBoxApiServiceClient{
		init: connect.NewClient[v1.InitRequest, v1.InitResponse](
			httpClient,
			baseURL+StencilBoxApiServiceInitProcedure,
			connect.WithSchema(stencilBoxApiServiceMethods.ByName("Init")),
			connect.WithClientOptions(opts...),
		),
	}
}

// stencilBoxApiServiceClient implements StencilBoxApiServiceClient.
type stencilBoxApiServiceClient struct {
	init *connect.Client[v1.InitRequest, v1.InitResponse]
}

// Init calls StencilBox.clientapi.v1.StencilBoxApiService.Init.
func (c *stencilBoxApiServiceClient) Init(ctx context.Context, req *connect.Request[v1.InitRequest]) (*connect.Response[v1.InitResponse], error) {
	return c.init.CallUnary(ctx, req)
}

// StencilBoxApiServiceHandler is an implementation of the
// StencilBox.clientapi.v1.StencilBoxApiService service.
type StencilBoxApiServiceHandler interface {
	Init(context.Context, *connect.Request[v1.InitRequest]) (*connect.Response[v1.InitResponse], error)
}

// NewStencilBoxApiServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStencilBoxApiServiceHandler(svc StencilBoxApiServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	stencilBoxApiServiceMethods := v1.File_StencilBox_clientapi_v1_clientapi_proto.Services().ByName("StencilBoxApiService").Methods()
	stencilBoxApiServiceInitHandler := connect.NewUnaryHandler(
		StencilBoxApiServiceInitProcedure,
		svc.Init,
		connect.WithSchema(stencilBoxApiServiceMethods.ByName("Init")),
		connect.WithHandlerOptions(opts...),
	)
	return "/StencilBox.clientapi.v1.StencilBoxApiService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StencilBoxApiServiceInitProcedure:
			stencilBoxApiServiceInitHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStencilBoxApiServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStencilBoxApiServiceHandler struct{}

func (UnimplementedStencilBoxApiServiceHandler) Init(context.Context, *connect.Request[v1.InitRequest]) (*connect.Response[v1.InitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("StencilBox.clientapi.v1.StencilBoxApiService.Init is not implemented"))
}
